#!/usr/bin/python
# -*- coding: utf-8 -*-
#    vcs-lint: version control repository (de-)linter
#
#    Copyright 2011-2015 Â© Jonathan Dowland <jmtd@debian.org>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; version 2 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details (LICENSE.md).

import sys, os, subprocess

def usage():
  print "usage: vcs-lint [ --verbose ]\n"+\
        "vcs-lint will inspect the current working directory."
  exit(0)

verbose = False
if "--verbose" in sys.argv:
  verbose = True
if "--help" in sys.argv:
  usage()

def debug(str):
  if verbose:
    print str

def run(cmd):
  p = subprocess.Popen(cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
  output, errors = p.communicate()
  return output

# how many debian package versions are there?
def get_package_versions():
  output = run(['dpkg-parsechangelog', '--format', 'rfc822' , '--all'])
  return set([ x[9:] for x in output.split("\n") if "Version: " == x[:9] ])

# git tags cannot contain ~: the most common substitution is _
# TODO: configurable, or some convention for declaring the mapping
# under debian/*?
# TODO: more careful transformations to abide by git check-ref-format
def filter_package_versions(versions):
  return set([ x.replace('~','_') for x in list(versions) ])

def get_git_tags():
  tags = set(filter(lambda x: x, run(["git", "tag", "-l"]).split("\n")))
  debug("\ttags: %s" % ", ".join(sorted(tags)))
  return tags

# git tag checking
# there should be a tag 'upstream/$uv' and 'debian/$uv-$dv' for every version $v = "$uv-$dv"
def missing_tags(repo,ttype,missing):
  if missing:
    print "%s: %d missing %s tags: %s" % (repo, len(missing), ttype, ", ".join(sorted(missing)))

def check_package_versions_tagged(repo,git_tags,package_versions):
  debug("\tcheck_package_versions_tagged")
  if not filter(lambda x: x.find("-") >= 0, package_versions): # native package
    missing_tags(repo, "package version", package_versions - git_tags)
  else:
    prefix = ""
    if filter(lambda x: x.find("upstream") == 0, git_tags):
      prefix = "upstream/"
    elif filter(lambda x: x.find("v") == 0, git_tags):
      prefix = "v"
    missing_tags(repo, "upstream",
      set( [ "%s%s"%(prefix,x[:x.find("-")]) for x in package_versions if x.find("-") >= 0 ]) - git_tags)
    missing_tags(repo, "debian", set(["debian/%s"%x for x in package_versions]) - git_tags)

# git branch checking
def get_git_branches(prefix):
  branches = run(["git", "for-each-ref", '--format=%(refname)', prefix]).split("\n")
  return set([ x[len(prefix):] for x in branches if prefix == x[:len(prefix)] ])
def get_git_local_branches():
  return get_git_branches("refs/heads/")
def get_git_origin_branches():
  return get_git_branches("refs/remotes/origin/")

# are all local branches represented at origin?
def check_local_branches_at_origin(repo,origin_branches,local_branches):
  debug("\tcheck_local_branches_at_origin")
  debug("\t\tlocal branches: %s" % ",".join(local_branches))
  debug("\t\torigin branches: %s" % ",".join(origin_branches))
  missing = local_branches - origin_branches
  if missing:
    print "%s: local branches not present in origin: %s" % (repo, ",".join(missing))

# is branch x ahead of origin/x?
def local_branch_ahead_of_origin(branch):
  debug("\tlocal_branch_ahead_of_origin")
  return bool(run(["git", "rev-list", branch, "^remotes/origin/%s" % branch, "--"]))

# do all local branches match origin branches of the same name?
def check_branches_match_origin (repo,origin_branches,local_branches):
  debug("\tcheck_branches_match_origin")
  for b in local_branches & origin_branches:
    debug("\t\t%s" % b)
    l = run(["git", "for-each-ref",'--format="%(objectname)', "refs/remotes/origin/%s" % b])
    r = run(["git", "for-each-ref",'--format="%(objectname)', "refs/heads/%s" % b])
    if r != l:
      if local_branch_ahead_of_origin(b):
        print "%s: commits to local branch %s have not been pushed to origin" % (repo,b)
      else:
        print "%s: local branch %s does not match origin branch %s" % (repo,b,b)

def is_gitrepo():
  return os.path.isdir(".git")

def repo_is_debian_package():
  return os.path.isfile("debian/changelog")

repo = os.getcwd()
if not is_gitrepo:
  sys.stderr.write("%s: not a git repository\n" % repo)
  exit(1)

origin_branches = get_git_origin_branches()
local_branches = get_git_local_branches()
check_local_branches_at_origin(repo, origin_branches, local_branches)
check_branches_match_origin(repo, origin_branches, local_branches)

if repo_is_debian_package:
  package_versions = filter_package_versions(get_package_versions())
  git_tags = get_git_tags()
  check_package_versions_tagged(repo, git_tags, package_versions)
